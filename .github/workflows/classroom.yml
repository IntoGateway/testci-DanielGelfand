name: "CI"

env:
  API_KEY_ALCHEMY: ${{ secrets.API_KEY_ALCHEMY }}
  FOUNDRY_PROFILE: "ci"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          submodules: "recursive"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Build the contracts and print their size"
        run: "forge build --sizes"

      - name: "Add build summary"
        run: |
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  test:
    needs: ["build"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          submodules: "recursive"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Show the Foundry config"
        run: "forge config"

      - name: "Generate a fuzz seed that changes weekly to avoid burning through RPC allowance"
        run: >
          echo "FOUNDRY_FUZZ_SEED=$(
            echo $(($EPOCHSECONDS - $EPOCHSECONDS % 604800))
          )" >> $GITHUB_ENV

      - name: "Run the tests"
        run: "forge test"

      - name: "Add test summary"
        run: |
          echo "## Tests result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  on: 
    push:
      branches:
      - '*'
      - '!status'
      - '!feedback'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  permissions:
    checks: write
    actions: read
    contents: read

  grade:
      needs: ["build"]
      name: Autograding
      if: ${{ !github.event.repository.is_template }}
      runs-on: ubuntu-latest
      timeout-minutes: 5
      steps:
        - uses: "foundry-rs/foundry-toolchain@v1"
        - uses: actions/checkout@v3
        
        # run grading
        # add id to step so outputs can be referenced
        - uses: education/autograding@v1
          name: "** Grading and Feedback **"
          id: autograde

      outputs:
        grading-score: ${{ steps.autograde.outputs.Points }}

  # job to build activity status icons
  build-activity-icons:
    name: Build Activity Icons
    runs-on: ubuntu-latest
    if: always()
    needs: build
    steps:
      # need to checkout whole repo
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # switch to status branch
      - run: git checkout status || git checkout -b status

      # make dir for activity status icons
      - name: make icons dir
        run: mkdir -p .github/activity-icons

      # create points bar
      - name: points bar
        uses: markpatterson27/points-bar@v1
        with:
          points: ${{ needs.build.outputs.grading-score }}
          path: '.github/activity-icons/points-bar.svg'

      # commit and push activity icons if statuses have changed
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/activity-icons'
          git commit -m "Add/Update activity icons" || exit 0
          git push origin status
